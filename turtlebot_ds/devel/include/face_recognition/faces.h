// Generated by gencpp from file face_recognition/faces.msg
// DO NOT EDIT!


#ifndef FACE_RECOGNITION_MESSAGE_FACES_H
#define FACE_RECOGNITION_MESSAGE_FACES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace face_recognition
{
template <class ContainerAllocator>
struct faces_
{
  typedef faces_<ContainerAllocator> Type;

  faces_()
    : x1(0)
    , y1(0)
    , x2(0)
    , y2(0)  {
    }
  faces_(const ContainerAllocator& _alloc)
    : x1(0)
    , y1(0)
    , x2(0)
    , y2(0)  {
  (void)_alloc;
    }



   typedef uint32_t _x1_type;
  _x1_type x1;

   typedef uint32_t _y1_type;
  _y1_type y1;

   typedef uint32_t _x2_type;
  _x2_type x2;

   typedef uint32_t _y2_type;
  _y2_type y2;




  typedef boost::shared_ptr< ::face_recognition::faces_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::face_recognition::faces_<ContainerAllocator> const> ConstPtr;

}; // struct faces_

typedef ::face_recognition::faces_<std::allocator<void> > faces;

typedef boost::shared_ptr< ::face_recognition::faces > facesPtr;
typedef boost::shared_ptr< ::face_recognition::faces const> facesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::face_recognition::faces_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::face_recognition::faces_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace face_recognition

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'face_recognition': ['/home/turtlebot/hri_project/turtlebot_ds/src/face_recognition/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::face_recognition::faces_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::face_recognition::faces_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::face_recognition::faces_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::face_recognition::faces_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::face_recognition::faces_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::face_recognition::faces_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::face_recognition::faces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "695c085e1207f64f5a439b516a3dd88f";
  }

  static const char* value(const ::face_recognition::faces_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x695c085e1207f64fULL;
  static const uint64_t static_value2 = 0x5a439b516a3dd88fULL;
};

template<class ContainerAllocator>
struct DataType< ::face_recognition::faces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "face_recognition/faces";
  }

  static const char* value(const ::face_recognition::faces_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::face_recognition::faces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 x1\n\
uint32 y1\n\
uint32 x2\n\
uint32 y2\n\
";
  }

  static const char* value(const ::face_recognition::faces_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::face_recognition::faces_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct faces_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::face_recognition::faces_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::face_recognition::faces_<ContainerAllocator>& v)
  {
    s << indent << "x1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.y2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FACE_RECOGNITION_MESSAGE_FACES_H
